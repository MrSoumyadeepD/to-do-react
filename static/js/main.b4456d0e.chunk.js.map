{"version":3,"sources":["ds.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatedList","filter","item","input","className","rel","href","src","logo","width","height","alt","Typography","component","autoComplete","TextField","label","type","required","onChange","e","updateInput","target","Button","variant","onClick","addItem","disabled","length","Grid","justify","alignItems","container","map","key","xs","direction","bgcolor","Paper","elevation","IconButton","aria-label","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,gC,6SCarCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAyBbC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GACTC,KAAM,IALK,E,oDASXC,GACJ,GAAkB,KAAdA,EAAkB,CAClB,IAAMF,EAAU,CACZG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAENN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CAAET,OAAMD,QAAS,Q,iCAI5BG,GACP,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAACC,GAAD,OAAUA,EAAKV,KAAOA,KAEtDK,KAAKE,SAAS,CAAET,KAAMU,M,kCAGdG,GACRN,KAAKE,SAAS,CAAEV,QAASc,M,+BAGnB,IAAD,OACL,OACI,yBAAKC,UAAU,OACX,0BACIC,IAAI,aACJC,KAAK,gFAET,4BAAQF,UAAU,cACd,yBACIG,IAAKC,IACLJ,UAAU,WACVK,MAAM,MACNC,OAAO,MACPC,IAAI,UAER,0CAEJ,kBAACC,EAAA,EAAD,CAAYC,UAAU,OAClB,yBAAKT,UAAU,aAEX,6BACA,0BAAMU,aAAa,OACf,kBAACC,EAAA,EAAD,CACIvB,GAAG,iBACHwB,MAAM,cACNC,KAAK,OACLb,UAAU,aAEVc,UAAQ,EACRvB,MAAOE,KAAKT,MAAMC,QAClB8B,SAAU,SAACC,GAAD,OACN,EAAKC,YAAYD,EAAEE,OAAO3B,WAQtC,kBAAC4B,EAAA,EAAD,CAEIC,QAAQ,YACR1C,MAAM,UACNsB,UAAU,UACVqB,QAAS,kBAAM,EAAKC,QAAQ,EAAKtC,MAAMC,UACvCsC,UAAW9B,KAAKT,MAAMC,QAAQuC,QANlC,QAWJ,kBAACC,EAAA,EAAD,CACIC,QAAQ,SACRC,WAAW,SACXC,WAAS,EACT5B,UAAW/B,EAAUG,MAErB,4BACKqB,KAAKT,MAAME,KAAK2C,KAAI,SAAC/B,GAClB,OACI,wBAAIgC,IAAKhC,EAAKV,IAMV,kBAACqC,EAAA,EAAD,CACI3B,MAAI,EACJiC,GAAI,GACJC,UAAU,MACVN,QAAQ,SACRC,WAAW,SACXM,QAAQ,gBAER,kBAACC,EAAA,EAAD,CACIC,UAAW,EACXnC,UAAW/B,EAAUK,OAEpBwB,EAAKP,MAEN,kBAAC6C,EAAA,EAAD,CACIC,aAAW,SACXhB,QAAS,kBACL,EAAKiB,WAAWxC,EAAKV,MAGzB,kBAAC,IAAD,eAgBhC,oD,GAxIamD,IAAMC,WCjCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4456d0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ds.b3470f64.png\";","import React from \"react\";\nimport logo from \"./ds.png\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\n// import { Container } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\n//deisgn button\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: \"center\",\n        color: theme.palette.text.secondary,\n    },\n}));\n\n// functional approach\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"react\" />\n//         <h1>Hello World!</h1>\n//       </header>\n\n//       <p>from Soumyadeep</p>\n//     </div>\n\n//   )\n\n// }\n// ----------------------\n\n// classical approach\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        //const classes = useStyles();\n        this.state = {\n            newItem: \"\",\n            list: [],\n        };\n    }\n\n    addItem(todoValue) {\n        if (todoValue !== \"\") {\n            const newItem = {\n                id: Date.now(),\n                value: todoValue,\n                isDone: false,\n            };\n            const list = [...this.state.list];\n            list.push(newItem);\n\n            this.setState({ list, newItem: \"\" });\n        }\n    }\n\n    deleteItem(id) {\n        const list = [...this.state.list];\n        const updatedList = list.filter((item) => item.id !== id);\n\n        this.setState({ list: updatedList });\n    }\n\n    updateInput(input) {\n        this.setState({ newItem: input });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <link\n                    rel=\"stylesheet\"\n                    href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n                />\n                <header className=\"App-header\">\n                    <img\n                        src={logo}\n                        className=\"App-logo\"\n                        width=\"100\"\n                        height=\"100\"\n                        alt=\"react\"\n                    />\n                    <h1>To Do App</h1>\n                </header>\n                <Typography component=\"div\">\n                    <div className=\"container\">\n                        {/* Add an item.... */}\n                        <br />\n                        <form autoComplete=\"off\">\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Add a To DO\"\n                                type=\"text\"\n                                className=\"input-text\"\n                                // placeholder=\"Write a to do\"\n                                required\n                                value={this.state.newItem}\n                                onChange={(e) =>\n                                    this.updateInput(e.target.value)\n                                }\n                            ></TextField>\n                        </form>\n\n                        {/* <input\n                        \n                    /> */}\n                        <Button\n                            //className={classes.root}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"add-btn\"\n                            onClick={() => this.addItem(this.state.newItem)}\n                            disabled={!this.state.newItem.length}\n                        >\n                            Add\n                        </Button>\n                    </div>\n                    <Grid\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        container\n                        className={useStyles.root}\n                    >\n                        <ol>\n                            {this.state.list.map((item) => {\n                                return (\n                                    <li key={item.id}>\n                                        {/* <input\n                                            type=\"text\"\n                                            checked={item.isDone}\n                                            onChange={() => {}}\n                                        /> */}\n                                        <Grid\n                                            item\n                                            xs={18}\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            bgcolor=\"primary.main\"\n                                        >\n                                            <Paper\n                                                elevation={3}\n                                                className={useStyles.paper}\n                                            >\n                                                {item.value}\n\n                                                <IconButton\n                                                    aria-label=\"delete\"\n                                                    onClick={() =>\n                                                        this.deleteItem(item.id)\n                                                    }\n                                                >\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </Paper>\n                                        </Grid>\n                                    </li>\n                                );\n                            })}\n\n                            {/* <li>\n                            <input type=\"checkbox\" />\n                            Learn css\n                            <button className=\"btn\">Delete</button>\n                        </li> */}\n                        </ol>\n                    </Grid>\n\n                    <p>from Soumyadeep</p>\n                </Typography>\n            </div>\n        );\n    }\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}